package com.neobank.audit.kafka;

import java.util.Map;

import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Component;

import com.neobank.audit.repository.AuditLogRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
@RequiredArgsConstructor
public class TransactionEventListener {
	
	private final AuditLogRepository repository;
	
	@KafkaListener(topics = "${kafka.topics.transaction}", groupId = "audit-service")
	public void onTransactionEvent(Map<String, Object> payload) {
		// We consume as Map to avoid sharing DTO libs; Kafkaâ€™s JsonDeserializer maps JSON->Map.
        // If you prefer strong typing, create the same TransactionEvent class in audit-service and use it as parameter type.
		
		try {
			String transactionId = (String) payload.get("transactionId");
			String fromAccountNumber = (String) payload.get("fromAccountNumber");
			String toAccountNumber = (String) payload.get("toAccountNumber");
			String transactionType = (String) payload.get("transactionType");
			String description = (String) payload.get("description");
			String amountObj = payload.get("amount");
		} catch (Exception e) {
			// TODO: handle exception
		}
	}

}
