package com.neobank.reports.scheduling;

import java.time.OffsetDateTime;
import java.time.YearMonth;
import java.time.ZoneOffset;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import com.neobank.reports.entity.MonthlySummary;
import com.neobank.reports.entity.RawTransactionEvent;
import com.neobank.reports.repository.*;

import lombok.RequiredArgsConstructor;

@Component
@RequiredArgsConstructor
public class SummaryAggregator {

	private final RawTransactionEventRepository rawrepository;
	 private final MothlySummaryRepository summaryRepo;
	 
	// run daily at 01:00 AM to aggregate previous day's data (cron style)
	 
	 @Scheduled(cron = "0 0 1 * * *")
	 public void aggregateDailyToMonthly() {
		// find all raw events for the last 30 days (safe window)
		 OffsetDateTime to = OffsetDateTime.now(ZoneOffset.UTC);
		 OffsetDateTime from  = to.minusDays(30);
		 
		 List<RawTransactionEvent> events = rawrepository.findByOccuredAtBetween(from, to);
		 
	     // group by accountId and YearMonth
		 Map<Long, Map<YearMonth, List<RawTransactionEvent>>> grouped = events.stream()
				 .collect(Collectors.groupingBy(
						 RawTransactionEvent::getAccountId,
						 Collectors.groupingBy(e -> YearMonth.from(e.getOccuredAt().atZoneSameInstant(ZoneOffset.UTC)))
						 ));
	 }
}
