package com.neobank.transactionservice.service;

import java.time.Instant;
import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.neobank.transactionservice.client.AccountServiceClient;
import com.neobank.transactionservice.dto.ApiResponse;
import com.neobank.transactionservice.dto.BalanceUpdateRequest;
import com.neobank.transactionservice.dto.TransactionRequest;
import com.neobank.transactionservice.model.AuditLog;
import com.neobank.transactionservice.model.Transaction;
import com.neobank.transactionservice.model.TransactionType;
import com.neobank.transactionservice.repository.AuditRepository;
import com.neobank.transactionservice.repository.TransactionRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class TransactionService {

	private final TransactionRepository transactionRepository;
	private final AccountServiceClient accountServiceClient;
	@Autowired
	private AuditService auditService;

	private static final String TRANSACTION_TOPIC = "transaction-events";

	public Transaction createTransaction(TransactionRequest request) {
		String txId = UUID.randomUUID().toString();
		// 1Ô∏è- Create Transaction entity from request
		Transaction transaction = Transaction.builder().transactionId(txId)
				.fromAccountNumber(request.getTransactionType() == TransactionType.WITHDRAWAL
						|| request.getTransactionType() == TransactionType.TRANSFER ? request.getFromAccountNumber()
								: null)
				.toAccountNumber(request.getTransactionType() == TransactionType.DEPOSIT
						|| request.getTransactionType() == TransactionType.TRANSFER ? request.getToAccountNumber()
								: null)
				.amount(request.getAmount()).transactionType(request.getTransactionType())
				.transactionDate(LocalDateTime.now()).description(request.getDescription()).build();

		// 2 - Map to BalanceUpdateRequest for account-service
		BalanceUpdateRequest bRequest  = BalanceUpdateRequest.builder()
				.fromAccountNumber(request.getFromAccountNumber())
				.toAccountNumber(request.getToAccountNumber())
				.transactionType(request.getTransactionType())
				.amount(request.getAmount())
				.build();								

		// 3 - call account-service to update the balance
			accountServiceClient.updateBalance(bRequest);
			System.out.println("in transa");
		Transaction saved = transactionRepository.save(transaction);

		auditService.logEvent(
				txId,
				transaction.getFromAccountNumber(),
				transaction.getToAccountNumber(),
				request.getAmount(), 
				request.getTransactionType(),
				request.getDescription());
	

		return saved;
	}

	// Fetch all transactions for a given account
	public List<Transaction> getByFromAccountNumberOrToAccountNumber(String accountNumber) {
		return transactionRepository.findByFromAccountNumberOrToAccountNumber(accountNumber,accountNumber);
	}
}
